package models;

import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;

import org.apache.commons.codec.binary.Base64;

import com.google.appengine.repackaged.org.apache.commons.codec.digest.DigestUtils;

import play.Logger;
import play.modules.siena.EnhancedModel;

import siena.*;
import siena.core.lifecycle.PreInsert;
import siena.core.lifecycle.PreSave;
import siena.core.lifecycle.PreUpdate;
import siena.embed.Embedded;
import util.Helper;

public class User extends EnhancedModel {

	private final static long RECENT_USER_THRESHOLD_MILLISECONDS = 1000 * 3600 * 24; // 24h
	private final static long RESET_PASSWORD_MAX_AGE_MS = 1000 * 3600 * 48; // 48h
	
	public static int ACCOUNT_STATUS_INVITED= 0;
	public static int ACCOUNT_STATUS_ACTIVE = 1;
	public static int ACCOUNT_STATUS_CLOSED = 2;
	
	public static int ACCOUNT_TYPE_FREE = 0;
	public static int ACCOUNT_TYPE_PRO = 1;
	
	
	public static int AUTHENTICATION_TYPE_NORMAL = 0;
	public static int AUTHENTICATION_TYPE_GOOGLEID = 1;
	public static int AUTHENTICATION_TYPE_UNDEFINED = 2;
	
	@Id
	public Long id;

	// Unique username (lowercased, trimmed, filtered)
	public String username;
	
	// Unique email (lowercased)
	public String email;
	
	
	
	
	// auto-filled field for searchable name (unique constraint) and easy admin search (lowercase, trimmed etc)
	@Index("search_name")
	public String search_name; 
	
	@Index("sw")
	public List<String> search_words;
	
	
	// normal user chosen fields
	public String fullname;
	public String firstname;
	
	public boolean has_no_password; // for GoogleID registered users, this is set to true.
	public String password;
	public String salt;

	public Date register_date;
	public Date login_date;
	public Date passwordchange_date;
	public Date invited_date;

	public String access_token;
	public String activation_token;
	
	// internal Handcraft Administrator access
	public boolean is_administrator;

	public int account_status;
	public int account_type;
	
	public int authentication_type; // email/password, google ID or other?

	public String email_activation_code;
	
	public String reset_password_code;
	public Date reset_password_date; // date when the reset-password link was created
	
	// 
	
	public int reputation;
	public String reputation_label;
	public int score;
	
	public int num_tries;
	public int num_good;
	public int num_wrong;
	
	
	

	public User(String email, String uniqueUserName)
	{
	  email = Helper.cleanEmail(email);
	  this.username = uniqueUserName;
	  this.fullname = uniqueUserName;
	  this.firstname = this.fullname.split(" ")[0].split("@")[0];
	  this.email = email;
	  this.is_administrator = false;
	  this.account_status = ACCOUNT_STATUS_INVITED;
	  this.register_date = null;
	  this.invited_date = new Date();
	  this.authentication_type = AUTHENTICATION_TYPE_UNDEFINED;
	  this.has_no_password = true;
	  this.reputation_label = "Intern";
	}
	
	public User(String username, String fullname, String email) {
		this.username = username;
		this.fullname = fullname;
		this.firstname = fullname.split(" ")[0];
		this.email = email;
		this.register_date = new Date();
		this.is_administrator = false;
		this.account_status = ACCOUNT_STATUS_ACTIVE;
		
		this.authentication_type = AUTHENTICATION_TYPE_NORMAL;
		this.reputation_label = "Intern";
	}

	public User(com.google.appengine.api.users.User googleUser,
			String uniqueUserName) {

		this.username = uniqueUserName;
		this.fullname = googleUser.getNickname();
		this.email = googleUser.getEmail();
		this.firstname = this.fullname.split(" ")[0];
		this.register_date = new Date();
		this.account_status = ACCOUNT_STATUS_ACTIVE;
		
		this.authentication_type = AUTHENTICATION_TYPE_GOOGLEID;
		this.has_no_password = true;
	    
		this.save(); // we need this so that our ID is autogenerated and set,
						     // before we can create an access_token

		// we need to create a new, random password to so that we create an
		// access token
		this.setPassword(util.Helper.generateNewPassword(32));
		
		// note: has_no_password was set to true by "setPassword", but we need to set it to False, because we're googleIO user
		this.has_no_password = true;
		
	  this.reputation_label = "Intern";
		this.save();
	}
	
	public String getMainUrl()
	{
		return "/" + URLEncoder.encode(this.username);
	}
	
	public String getImageUrl()
	{
		return getImageUrl(0);
	}
	
	public String getImageUrl(int size)
	{
		if (email==null) return "";
		return "http://www.gravatar.com/avatar/" + Helper.md5hex(email.trim().toLowerCase()) + (size>0?"?s=" + size:"");
	}	
	
	@PreSave
	@PreInsert
	@PreUpdate
	public void updateSearchFields()
	{
		this.search_words = Helper.splitSearchWords(this.id + "," + this.username + "," + this.fullname + "," + this.firstname, this.fullname + "," + this.firstname, this.email);
	}

	// encryption and password methods
	public boolean checkPassword(String unencryptedPassword) {

		try {
			byte[] bSalt = Base64.decodeBase64(this.salt);
			byte[] bDigest = Helper.getHash(unencryptedPassword, bSalt);
			String encodedOutcome = Base64.encodeBase64String(bDigest);
			return encodedOutcome.equals(this.password);
		} catch (Exception e) {
			// make logging in impossible.
			this.password = "ENCRYPTIONERROR";
			this.salt = "ENCRYPTIONERROR";
			this.access_token = null;
			Logger.error("Could not encrypt passwords! Error:" + e.getMessage()
					+ ":" + e);
			e.printStackTrace();
			return false;
		}
	}

	public void setPassword(String newPassword) {
		try {
			if (this.id == null || this.id < 1) {
				Logger.error("cannot set password because user object is not saved before setting password. Change the code!");
			}

			byte[] bSalt = new byte[8];
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
			random.nextBytes(bSalt);
			this.salt = Base64.encodeBase64String(bSalt);

			byte[] bDigest = Helper.getHash(newPassword, bSalt);
			this.password = Base64.encodeBase64String(bDigest);

			// update access_token too
			this.access_token = (this.id + "|" + Base64
					.encodeBase64String(Helper.getHash(
							password + "|" + this.id, bSalt))).trim();

			this.passwordchange_date = new Date();
			
			this.has_no_password = false;
		} catch (Exception e) {
			// make login in impossible.
			this.password = "ENCRYPTIONERROR";
			this.salt = "ENCRYPTIONERROR";
			this.access_token = null;
			Logger.error("Could not encrypt passwords! Error:" + e.getMessage()
					+ ":" + e);
			e.printStackTrace();
		}

	}

	/**
	 * creates the reset_password link
	 */
	public void resetPassword() {
	  this.reset_password_code = Helper.generateNewPassword(16);
	  this.reset_password_date = new Date();
	  
	  // don't forget to save.
	}

	public boolean authenticateToken(String access_token) {
		if (access_token == null)
			return false;
		return access_token.equals(this.access_token);
	}

	public String regenerateActivationToken() {
		try {
			byte[] token = new byte[16];
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
			random.nextBytes(token);

			this.activation_token = Base64.encodeBase64String(token);
			return this.activation_token;
		} catch (Exception e) {
			// missing encoding methods...!
			return null;
		}
	}

	/**
	 * returns true if the user was recently created in our datastore, based on
	 * register_date
	 * 
	 * @return
	 */
	public boolean isRecentlyCreated() {
		if (register_date == null)
			return false;
		return (System.currentTimeMillis() - register_date.getTime() <= RECENT_USER_THRESHOLD_MILLISECONDS);

	}

	public String calculateEmailChangeActivationCode(String email2) throws Exception {
		byte[] salt = ("user_"+this.id+"").getBytes();
		byte[] code = Helper.getHash(this.id + "|" + this.email + "|" + Helper.cleanEmail(email2), salt);
		return Helper.hex(code);
		
	}

  public String getPasswordResetUrl() {
    return "resetpassword/" + this.id + "/" + this.reset_password_code;
  }

  public boolean checkResetCode(String reset_code) {
   if (reset_code==null || this.reset_password_code==null || this.reset_password_date==null) return false;
   if (this.reset_password_date.getTime() < System.currentTimeMillis() - RESET_PASSWORD_MAX_AGE_MS) return false; // expired
   if (reset_code.trim().equals(this.reset_password_code)) return true;
   return false;
  }

 

  public void processCorrect() {
    score = score + 2;
    num_good = num_good + 1;
    num_tries = num_tries + 1;
    
    //TODO: upgrade reputation when thresholds are met..!
  }
  
  public void processWrong() {
    score = Math.max(0, score - 1);
    num_wrong = num_wrong + 1;
    num_tries = num_tries + 1;
    
    
  }
  
  public int pointsToNextLevel()
  {
    Hashtable<String,Integer> t = getLevels();
    String foundLevel = "Intern";
    int foundScore = 100000;
    for (String name:t.keySet())
    {
      int c = t.get(name);
      if (c>this.score && c<foundScore)
      {
        // too far ahead
        foundScore = c;
        foundLevel = name;
      }
    }
    return foundScore - this.score;
  }
  
  public String newLevelShouldBe()
  {
    Hashtable<String,Integer> t = getLevels();
    String foundLevel = "Intern";
    int foundScore = 0;
    for (String name:t.keySet())
    {
      Logger.info("checking level:"+ name + ", found:"+ foundLevel + ", score:"+ foundScore);
      int c = t.get(name);
      if (c<this.score && c>foundScore)
      {
        // too far ahead
        foundScore = c;
        foundLevel = name;
      }
    }
    return foundLevel;
 }
  
  public static Hashtable<String, Integer> getLevels()
  {
    Hashtable<String,Integer> t = new Hashtable();
    t.put("Intern", 0);
    t.put("Art Handler", 3);
    t.put("Assistant to the Trainee", 7);
    t.put("Trainee", 20);
    t.put("Attendant", 40);
    t.put("Social Media Officer", 50);
    t.put("Researcher", 75);
    t.put("Collection Manager", 100);
    t.put("Registrar", 110);
    t.put("Junior Curator", 125);
    t.put("Curator", 150);
    t.put("Senior Curator", 200);
    t.put("Head of Spin", 235);
    t.put("King of Spin", 275);
    t.put("Demi God Curator", 350);
    t.put("Museum Director", 500);
    t.put("Spinny Bar Trustee", 2000);
    t.put("David Bearman :)", 5000);
    
    return t;
    
  }

}
